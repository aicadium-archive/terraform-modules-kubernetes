fullnameOverride: ${fullname_override}

image: "${image}"
imageTag: "${image_tag}"
replicas: ${replicas}

serviceType: "${service_type}"
loadBalancerIP: ${static_ip}
loadBalancerSourceRanges:  ${lb_source_range}
whiteListSourceRange: ${whitelist_source_range}
externalTrafficPolicy: ${external_traffic_policy}

startupArguments: ${startup_arguments}

podDisruptionBudget: ${pod_disruption_budget}
  # maxUnavailable: 1
  # minAvailable: 2

priorityClassName: ${pod_priority_class}

rootCAs: ${root_ca}

resources: ${resources}

debug:
  enabled: ${debug}

logLevel: ${log_level}

maxIdleConnsPerHost: ${max_idle_conns_per_host}

deploymentStrategy: ${deployment_strategy}
  # rollingUpdate:
  #   maxSurge: 1
  #   maxUnavailable: 0
  # type: RollingUpdate

securityContext: ${security_context}
useNonPriviledgedPorts: ${use_non_priviledged_ports}
env: ${env}

nodeSelector: ${node_selector}

affinity: ${affinity}

tolerations: ${tolerations}
# - key: "key"
#   operator: "Equal|Exists"
#   value: "value"
#   effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"

## Kubernetes ingress filters
kubernetes:
  # endpoint:
  namespaces: ${namespaces}
  labelSelector: ${jsonencode(label_selector)}
  ingressClass: "${ingress_class}"
  ingressEndpoint:
  #   hostname: "localhost"
  #   ip: "127.0.0.1"
  #   publishedService: "namespace/servicename"
    useDefaultPublishedService: true

proxyProtocol:
  enabled: false
  # trustedIPs is required when enabled
  trustedIPs: []
  # - 10.0.0.0/8
forwardedHeaders:
  enabled: false
  # trustedIPs is required when enabled
  trustedIPs: []
  # - 10.0.0.0/8

## Add arbitrary ConfigMaps to deployment
## Will be mounted to /configs/, i.e. myconfig.json would
## be mounted to /configs/myconfig.json.
configFiles: ${config_files}
  # myconfig.json: |
  #   filecontents...

## Add arbitrary Secrets to deployment
## Will be mounted to /secrets/, i.e. file.name would
## be mounted to /secrets/mysecret.txt.
## The contents will be base64 encoded when added
secretFiles: ${secret_files}
  # mysecret.txt: |
  #   filecontents...

ssl:
  enabled: ${ssl_enabled}
  enforced: ${ssl_enforced}
  permanentRedirect: ${ssl_permanent_redirect}
  tlsMinVersion: "${ssl_min_version}"
  cipherSuites: ${ssl_ciphersuites}

kvprovider:
  storeAcme: ${kv_store_acme}
  acmeStorageLocation: ${kv_acme_storage_location}
  ${indent(2, kv_provider)}

acme:
  enabled: ${acme_enabled}
  keyType: ${acme_key_type}
  email: ${acme_email}
  onHostRule: ${acme_on_host_rule}
  staging: ${acme_staging}
  logging: ${acme_logging}
  # Configure a Let's Encrypt certificate to be managed by default.
  # This is the only way to request wildcard certificates (works only with dns challenge).
  domains:
    enabled: ${acme_domains_enabled}
    # List of sets of main and (optional) SANs to generate for
    # for wildcard certificates see https://docs.traefik.io/configuration/acme/#wildcard-domains
    domainsList: ${acme_domains}
  ## ACME challenge type: "tls-sni-01", "tls-alpn-01", "http-01" or "dns-01"
  ## Note the chart's default of tls-sni-01 has been DEPRECATED and (except in
  ## certain circumstances) DISABLED by Let's Encrypt. It remains as a default
  ## value in this chart to preserve legacy behavior and avoid a breaking
  ## change. Users of this chart should strongly consider making the switch to
  ## the recommended "tls-alpn-01" (avaialbe since v1.7), dns-01 or http-01
  ## (available since v1.5) challenge.
  challengeType: ${acme_challenge}
  ## Configure dnsProvider to perform domain verification using dns challenge
  ## Applicable only if using the dns-01 challenge type
  delayBeforeCheck: ${acme_delay_before_check}
  dnsProvider:
    name: ${acme_dns_provider}
    ${acme_dns_provider_variables}
  persistence:
    # We don't support the PV ACME store
    enabled: false

dashboard:
  enabled: ${dashboard_enabled}
  domain: "${dashboard_domain}"
  serviceType: "${dashboard_service_type}"
  service:
    annotations: ${dashboard_service_annotations}
    #   key: value
  ingress:
    annotations: ${dashboard_ingress_annotations}
    labels: ${dashboard_ingress_labels}
    tls: ${dashboard_ingress_tls}
  auth: ${dashboard_auth}
    # basic:
    #   username: password
  statistics:
    # Number of recent errors to show in the ‘Health’ tab
    recentErrors: ${dashboard_recent_errors}

service:
  annotations: ${service_annotations}
  labels: ${service_labels}

  ## Further config for service of type NodePort
  ## Default config with empty string "" will assign a dynamic
  ## nodePort to http and https ports
  nodePorts:
    http: "${node_port_http}"
    https: "${node_port_https}"

gzip:
  enabled: true

traefikLogFormat: ${traefik_log_format}
accessLogs:
  enabled: ${access_logs_enabled}
  filters: ${access_logs_filters}
  ## Path to the access logs file. If not provided, Traefik defaults it to stdout.
  # filePath: ""
  format: ${access_log_format}  # choices are: common, json
  ## for JSON logging, finer-grained control over what is logged. Fields can be
  ## retained or dropped, and request headers can be retained, dropped or redacted
  fields:
    # choices are keep, drop
    defaultMode: keep
    names: {}
      # ClientUsername: drop
    headers:
      # choices are keep, drop, redact
      defaultMode: keep
      names: {}
        # Authorization: redact
rbac:
  enabled: ${rbac_enabled}
## Enable the /metrics endpoint, for now only supports prometheus
## set to true to enable metric collection by prometheus
metrics:
  prometheus:
    enabled: ${prometheus_enabled}
    buckets: ${prometheus_buckets}
    service:
      # Set a custom service name
      name: ${prometheus_service_name}
      annotations: ${prometheus_service_annotations}
      # prometheus.io/scrape: "true"
      port: ${prometheus_service_port}
      type: ${prometheus_service_type}
      # loadBalancerIP: ""
      # loadBalancerSourceRanges: []
      # externalIP: []
      # externalTrafficPolicy: Cluster
      # nodePort: 9100
  datadog:
    enabled: ${datadog_enabled}
    address: "${datadog_address}"
    pushInterval: ${datadog_push_interval}
  statsd:
    enabled: ${statsd_enabled}
    address: ${statsd_address}
    pushInterval: ${statsd_push_interval}

deployment:
  podLabels: ${pod_labels}
  podAnnotations: ${pod_annotations}
  hostPort:
    httpEnabled: ${http_host_port_binding}
    httpsEnabled: ${https_host_port_binding}
    dashboardEnabled: ${dashboard_host_port_binding}

tracing:
  enabled: ${tracing_enabled}
  serviceName: ${tracing_service_name}
  backend: ${tracing_backend}
  ${tracing_settings}
  # jaeger:
  #   localAgentHostPort: "127.0.0.1:6831"
  #   samplingServerURL: http://localhost:5778/sampling
  #   samplingType: const
  #   samplingParam: 1.0
  # zipkin:
  #   httpEndpoint: http://localhost:9411/api/v1/spans
  #   debug: false
  #   sameSpan: false
  #   id128bit: true
  # datadog:
  #   localAgentHostPort: "127.0.0.1:8126"
  #   debug: false
  #   globalTag: ""

sendAnonymousUsage: false

## Create HorizontalPodAutoscaler object.
##
autoscaling: ${autoscaling}
#   minReplicas: 1
#   maxReplicas: 10
#   metrics:
#   - type: Resource
#     resource:
#       name: cpu
#       targetAverageUtilization: 60
#   - type: Resource
#     resource:
#       name: memory
#       targetAverageUtilization: 60

## Timeouts
##
# timeouts:
#   ## responding are timeouts for incoming requests to the Traefik instance
#   responding:
#     readTimeout: 0s
#     writeTimeout: 0s
#     idleTimeout: 180s
#   ## forwarding are timeouts for requests forwarded to the backend servers
#   forwarding:
#     dialTimeout: 30s
#     responseHeaderTimeout: 0s

# forwardAuth:
#   entryPoints: ["http", "https"]
#   address: https://authserver.com/auth
#   trustForwardHeader: true

# Any extra volumes to define for the pod
extraVolumes: ${extra_volumes}
  # - name: example-name
  #   hostPath:
  #     path: /path/on/host
  #     type: DirectoryOrCreate

# Any extra volume mounts to define for the Traefik container
extraVolumeMounts: ${extra_volume_mounts}
#   - name: example-name
#     mountPath: /path/in/container
